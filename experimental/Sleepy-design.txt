Setting:
	# Sleepy standard
	communication = ideal_partial_synchronous(delta)
	channels = ideal_pairwise_channels
	PKI = ideal_PKI
	random_oracle = ?

	need_input_variable(n : int, corruption_rate : double, delta : int)
	
Environment:
	?
	# data structure: chain

Protocol:
	Round init:
		chain = genesis	
	
	Round i for all:
		receive_messages()
		for msg in received_messages:
			if validate(msg):
				if msg.content is chain:
					if len(msg.chain) > len(chain) and validate(msg.chain):
						chain = msg.chain
						erase(received_tx, msg.chain)
						send_to_all(sign(chain))
				elif: msg.content is transaction:
					received_tx.append(msg.tx)
		if eligible():
			sigma = sign(chain[-1].h, received_tx, t)
			h' = d(chain[-1].h, recieved_tx, t, my_id, sigma)
			B = (chain[-1].h, txs, t, my_id, sigma, h')
			chain = chain || B
			send_to_all(sign(chain))
			received_tx.clear()
		output(extract(chain))

Measurements:
	
	@test_every_round
	Consistency:
		for nodei in honest_nodes:
			for nodej in honest_nodes:
				for ti, tj in xrange(1, current):
				if !isPrefix(nodei.output[ti], nodej.output[tj]) and
				   !isPrefix(nodej.output[tj], nodei.output[ti])
				   return false
		return true
	
	@test_ever_round
	Liveness:
		for tx in all_tx
			if tx.t < current - t_confirm
				for node in honest_nodes:
					for ti in xrange(tx.t + t_confirm, current):
						if not tx in node.output(ti):
							return false
		return true
	
	# chain_growth, chain_quality, chain_consistency

Test:
	With code:
		parameter_list = {n = 100 corruption_rate = 0 delta = 1 max_round = 1000}
		run_experiments(parameter_list, sleepy)
	
	In commandline:
		edel test sleepy 100 0 1 1000
	
	Output: (in imaginary)
		Run #11:
		Parameters: n = 100, corruption_rate = 10, delta = 1, max_round = 1000
		Time: xxx ms
		Result:
		Consistency true forall
		Liveness true forall



		
